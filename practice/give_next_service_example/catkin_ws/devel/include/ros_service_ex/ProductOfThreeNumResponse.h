// Generated by gencpp from file ros_service_ex/ProductOfThreeNumResponse.msg
// DO NOT EDIT!


#ifndef ROS_SERVICE_EX_MESSAGE_PRODUCTOFTHREENUMRESPONSE_H
#define ROS_SERVICE_EX_MESSAGE_PRODUCTOFTHREENUMRESPONSE_H


#include <string>
#include <vector>
#include <map>

#include <ros/types.h>
#include <ros/serialization.h>
#include <ros/builtin_message_traits.h>
#include <ros/message_operations.h>


namespace ros_service_ex
{
template <class ContainerAllocator>
struct ProductOfThreeNumResponse_
{
  typedef ProductOfThreeNumResponse_<ContainerAllocator> Type;

  ProductOfThreeNumResponse_()
    : product(0)  {
    }
  ProductOfThreeNumResponse_(const ContainerAllocator& _alloc)
    : product(0)  {
  (void)_alloc;
    }



   typedef int32_t _product_type;
  _product_type product;





  typedef boost::shared_ptr< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> > Ptr;
  typedef boost::shared_ptr< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> const> ConstPtr;

}; // struct ProductOfThreeNumResponse_

typedef ::ros_service_ex::ProductOfThreeNumResponse_<std::allocator<void> > ProductOfThreeNumResponse;

typedef boost::shared_ptr< ::ros_service_ex::ProductOfThreeNumResponse > ProductOfThreeNumResponsePtr;
typedef boost::shared_ptr< ::ros_service_ex::ProductOfThreeNumResponse const> ProductOfThreeNumResponseConstPtr;

// constants requiring out of line definition



template<typename ContainerAllocator>
std::ostream& operator<<(std::ostream& s, const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> & v)
{
ros::message_operations::Printer< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >::stream(s, "", v);
return s;
}


template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator==(const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator1> & lhs, const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator2> & rhs)
{
  return lhs.product == rhs.product;
}

template<typename ContainerAllocator1, typename ContainerAllocator2>
bool operator!=(const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator1> & lhs, const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator2> & rhs)
{
  return !(lhs == rhs);
}


} // namespace ros_service_ex

namespace ros
{
namespace message_traits
{





template <class ContainerAllocator>
struct IsFixedSize< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsFixedSize< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >
  : TrueType
  { };

template <class ContainerAllocator>
struct IsMessage< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> const>
  : TrueType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >
  : FalseType
  { };

template <class ContainerAllocator>
struct HasHeader< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> const>
  : FalseType
  { };


template<class ContainerAllocator>
struct MD5Sum< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "26cae2f0f3a92c4a8f32305e4e3169ea";
  }

  static const char* value(const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator>&) { return value(); }
  static const uint64_t static_value1 = 0x26cae2f0f3a92c4aULL;
  static const uint64_t static_value2 = 0x8f32305e4e3169eaULL;
};

template<class ContainerAllocator>
struct DataType< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "ros_service_ex/ProductOfThreeNumResponse";
  }

  static const char* value(const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator>&) { return value(); }
};

template<class ContainerAllocator>
struct Definition< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >
{
  static const char* value()
  {
    return "int32 product\n"
"\n"
;
  }

  static const char* value(const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator>&) { return value(); }
};

} // namespace message_traits
} // namespace ros

namespace ros
{
namespace serialization
{

  template<class ContainerAllocator> struct Serializer< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >
  {
    template<typename Stream, typename T> inline static void allInOne(Stream& stream, T m)
    {
      stream.next(m.product);
    }

    ROS_DECLARE_ALLINONE_SERIALIZER
  }; // struct ProductOfThreeNumResponse_

} // namespace serialization
} // namespace ros

namespace ros
{
namespace message_operations
{

template<class ContainerAllocator>
struct Printer< ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator> >
{
  template<typename Stream> static void stream(Stream& s, const std::string& indent, const ::ros_service_ex::ProductOfThreeNumResponse_<ContainerAllocator>& v)
  {
    s << indent << "product: ";
    Printer<int32_t>::stream(s, indent + "  ", v.product);
  }
};

} // namespace message_operations
} // namespace ros

#endif // ROS_SERVICE_EX_MESSAGE_PRODUCTOFTHREENUMRESPONSE_H
